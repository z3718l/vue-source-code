{"version":3,"file":"vue.js","sources":["../../src/util/index.js","../../src/observe/array.js","../../src/observe/index.js","../../src/state.js","../../src/init.js","../../src/index.js"],"sourcesContent":["// 判断当前数据是不是对象\nexport function isObject(data) {\n    return typeof data === 'object' && data !== null\n}\n\nexport function def(data, key, value) {\n    Object.defineProperty(data, key, {\n        enumerable: false,\n        configurable: false,\n        value\n    })\n}","\n// 我们要重写数组的方法，一般是7个方法\n/**\n * push shift unshift pop reverse sort splice\n * 这些方法会导致数组本身发生变化，不会改变原数组的不需要重写\n */\nlet oldArrayMethods = Array.prototype;\nexport const arrayMethods = Object.create(oldArrayMethods);\nconst methods = [\n    'push',\n    'shift',\n    'unshift',\n    'pop',\n    'reverse',\n    'sort',\n    'splice'\n]\nmethods.forEach(method => {\n    arrayMethods[method] = function (...args) {\n        console.log('调用了push')\n        const result = oldArrayMethods[method].apply(this, args); // 再调用原生的方法\n\n        // push unshift添加的元素可能还是一个对象，所以还要对这些对象进行监控\n        let inserted; // 当前用户插入的元素\n        let ob = this.__ob__;\n        switch (method) {\n            case 'push':\n            case 'unshift':\n                inserted = args;\n                break;\n            case 'splice':\n                inserted = args.slice(2);\n            default:\n                break;\n        }\n\n        if (inserted) {\n            // 将新增属性继续观测\n            ob.observerArray(inserted);\n        }\n\n        return result;\n    }\n})\n","// 把data中的数据 都使用Object.defineProperty重新定义\n// Object.defineProperty 兼容性不好，不能兼容ie8及以下\nimport { isObject, def } from '../util/index'\nimport { arrayMethods } from './array.js'\nclass Observer {\n    constructor(value) {\n        // vue如果数据的层级过多，需要递归的去解析对象中的属性，依次增加set和get方法\n        // proxy不需要一上来就进行递归，也不需要添加set和get方法，所以性能会有所提高\n        // console.log(value, '=====')\n        /**\n         * 如果在这里不对数组进行处理，这里会对数组的索引监控，这样如果数组比较大的话，就会造成性能问题，所以我们会对数组方法进行重写\n         */\n        // value.__ob__ = this; // 给每一个监控过的对象都增加一个__ob__属性（作用：表示这个对象已经被监控）\n        def(value, '__ob__', this);\n        if (Array.isArray(value)) {\n            // 如果是数组的话，不会对数组的索引进行监控\n            // 对数组进行监控\n            // 前端开发中，一般很少直接去操作索引，一般都是使用push unshift shift\n            // 如果数组里面放的是对象，在进行监控\n            value.__proto__ = arrayMethods;\n            this.observerArray(value);\n        } else {\n            // 对对象进行监控\n            this.walk(value);\n        }\n    }\n    observerArray(value) { // [{}]\n        for(let i = 0; i < value.length; i ++) {\n            observe(value[i]);\n        }\n    }\n    walk(data) {\n        // 拿到用户传的对象数据 data => {name: 'zhangsan',age: 12}\n        let keys = Object.keys(data); // [name, age]\n        // for(let i = 0; i < keys.length; i ++) {\n        //     let key = keys[i]; // key => name age(循环之后)\n        //     let value = data[key]; // value => 'zhangsan' 12(循环之后)\n        //     defineReactive(data, key, value); // 定义响应式数据\n        // }\n        // 优化for循环\n        keys.forEach((key) => {\n            defineReactive(data, key, data[key]);\n        })\n    }\n}\n\nfunction defineReactive(data, key, value) {\n    // 使用defineProperty进行数据响应\n    // 用户进行获取值、设置值得话就会在这里进行拦截\n    observe(value); // 递归调用，如果value还是一个对象，就再走一遍new Observer（递归实现深度检测）\n    // 添加了这个递归方法，无论是几层嵌套，都能把对象监测到\n    Object.defineProperty(data, key, {\n        get() {\n            return value\n        },\n        set(newValue) {\n            if(newValue === value) return;\n            observe(value); // 如果用户设置的是一个对象，继续进行劫持\n            value = newValue\n        }\n    })\n}\n\nexport function observe(data) {\n    let isObj = isObject(data)\n    if(!isObj) {\n        return;\n    }\n    new Observer(data); // 用来观测数据\n}","import { observe } from './observe/index.js'\nexport function initState(vm) {\n    const opts = vm.$options;\n    // vue的数据来源，属性 方法 数据 计算属性 watch\n    if (opts.props) {\n        initProps(vm);\n    }\n    if (opts.methods) {\n        initMethods(vm);\n    }\n    if (opts.data) {\n        initData(vm);\n    }\n    if (opts.computed) {\n        initComputed(vm);\n    }\n    if (opts.watch) {\n        initWatch(vm);\n    }\n}\nfunction initProps() {}\nfunction initMethods() {}\nfunction initData(vm) {\n    // 数据初始化工作\n    let data = vm.$options.data; // 用户传递的数据\n    /**\n     * vm._data:为了用户可以方便拿到数据\n     * 如果data是一个函数，就直接执行函数，并且把函数的this指向vm（vue的实例）\n     * 如果不是函数，直接等于data\n     */\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data;\n\n    /**\n     * 对象劫持 用户改变了数据，我们希望可以得到通知 ==》并且刷新页面数据\n     * MVVM模式 数据变化了可以驱动视图变化\n     * Object.defineProperty() 给属性增加get方法和set方法\n     */\n    observe(data); // 响应式原理\n}\nfunction initComputed() {}\nfunction initWatch() {}\n","// 在原型上添加init方法\nimport { initState} from './state.js'\nexport function initMixin(Vue) {\n\t// vue初始化流程\n  Vue.prototype._init = function(options) {\n\t\t// 1、数据的劫持\n\t\tconst vm = this;\n\t\tvm.$options = options;\n\t\tinitState(vm)\n\t}\n}","// 这里就是vue的核心代码\n// 这个文件只是vue的一个声明，不做具体的操作\n// 由于vue的方法比较多，我们会把他们写在原型上，方便调用\nimport { initMixin } from './init.js'\nfunction Vue(options) {\n    // options接收vue实例中的所有方法和配置\n    // 在这里进行vue的初始化操作\n    // console.log(options);\n    this._init(options)\n}\n// 通过引入的方式，给原型上添加方法\ninitMixin(Vue)\nexport default Vue"],"names":["isObject","data","def","key","value","Object","defineProperty","enumerable","configurable","oldArrayMethods","Array","prototype","arrayMethods","create","methods","forEach","method","console","log","args","result","apply","inserted","ob","__ob__","slice","observerArray","Observer","isArray","__proto__","walk","i","length","observe","keys","defineReactive","get","set","newValue","isObj","initState","vm","opts","$options","props","initData","computed","watch","_data","call","initMixin","Vue","_init","options"],"mappings":"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"}